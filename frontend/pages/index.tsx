import { useState, useEffect } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { Grow, CircularProgress } from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { Snackbar, Alert } from '@mui/material';

import { Post } from '../components';
import { getPosts } from '../state/actions/posts';
import { EditForm } from '../containers';
import { PostTypeState } from '../resources/interfaces';
import { GridItem, MainContainer, MainGrid } from '../styles/indexStyled';
import { useAuthState } from '../resources/context';

const Home: NextPage = () => {
  const [open, setOpen] = useState(false);
  const [currentId, setCurrentId] = useState(null);
  const [showSnackbar, setShowSnackbar] = useState(false);
  const { userInfo } = useAuthState();
  const posts = useSelector((state: PostTypeState) => state);
  const resultDialog = useSelector((state: any) => state.dialog);
  const dispatch = useDispatch();

  useEffect(() => {
    dispatch(getPosts());
  }, [currentId, dispatch]);

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setCurrentId(null);
    setOpen(false);
  };

  const handleCloseSnackbar = () => setShowSnackbar(!showSnackbar);
  console.log(resultDialog?.dialog?.severity);
  return (
    <>
      <Head>
        <title>IT Memes World</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <MainContainer>
        <Grow in>
          <MainGrid
            container={true}
            direction='column-reverse'
            justifyContent='space-between'
            alignItems='stretch'
            spacing={3}
          >
            {!posts?.posts.length ? (
              <CircularProgress />
            ) : (
              posts.posts.map((post: any) => (
                <GridItem item key={post.id} xs={12} sm={12}>
                  <Post
                    post={post}
                    setCurrentId={setCurrentId}
                    handleClickOpen={handleClickOpen}
                    user={userInfo}
                  />
                </GridItem>
              ))
            )}
            {open && (
              <EditForm
                currentId={currentId}
                handleClose={handleClose}
                open={open}
                setShowSnackbar={setShowSnackbar}
              />
            )}

            {showSnackbar && (
              <Snackbar
                open
                autoHideDuration={4000}
                onClose={handleCloseSnackbar}
              >
                <Alert
                  onClose={handleCloseSnackbar}
                  severity={resultDialog?.dialog?.severity}
                  sx={{
                    width: '100%',
                    backgroundColor: `${
                      resultDialog?.dialog?.severity === 'error' ? '#D32F2F' : '#2E7D32'
                    }`,
                  }}
                >
                  {resultDialog?.dialog?.message}
                </Alert>
              </Snackbar>
            )}
          </MainGrid>
        </Grow>
      </MainContainer>
    </>
  );
};

export default Home;
